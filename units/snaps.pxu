id: client-snaps
plugin: resource
command: cat $PLAINBOX_PROVIDER_DATA/client-snaps.resource

id: server-snaps
plugin: resource
command: cat $PLAINBOX_PROVIDER_DATA/server-snaps.resource

id: session-snaps
plugin: resource
command: cat $PLAINBOX_PROVIDER_DATA/session-snaps.resource

id: ancillary-snaps
plugin: resource
command: cat $PLAINBOX_PROVIDER_DATA/ancillary-snaps.resource

id: jenkins-snaps
plugin: resource
command: cat $PLAINBOX_PROVIDER_DATA/jenkins-snaps.resource

id: store
_summary: Enumerate revisions for all tested snaps
plugin: resource
command:
  set -euo pipefail
  while read snap; do
    while read track risk revision; do
      echo snap: $snap
      echo track: $track
      echo risk: $risk
      echo revision: $revision
      echo
    done < <( curl -s -H "Snap-Device-Series: 16" "https://api.snapcraft.io/v2/snaps/info/${snap}" \
              | jq -r --arg TRACK "latest" --arg ARCH "$( dpkg-architecture -qDEB_HOST_ARCH )" \
                '."channel-map" | .[] | select(.channel.architecture==$ARCH)
                 | [.channel.track, .channel.risk, .revision] | @tsv' \
              || kill $$ )
  done < <( cat $PLAINBOX_PROVIDER_DATA/*-snaps.resource | awk '/^snap:/ { print $2 }' | sort -u )

id: snaps/check_environment
plugin: shell
_summary: Check the testing environment
command:
  set -euo pipefail
  if [ "$( snap whoami | awk '/^email:/ { print $2 }' )" == "-" ]; then
    echo 'These tests require the `snap` command to be logged in, please run:' >&2
    echo '  snap login' >&2
    exit 1
  fi
  .
  if [ "$( snap get system experimental.parallel-instances )" != "true" ] || ! snap set system experimental.parallel-instances=true; then
    echo 'These tests require parallel instance support, please run:' >&2
    echo '  snap set system experimental.parallel-instances=true' >&2
    exit 2
  fi
  .
  if [ -x /snap/checkbox-mir/current/bin/setup.sh ]; then
    if ! timeout .1 sudo -S /snap/checkbox-mir/current/bin/setup.sh < /dev/null; then
      echo >&2
      echo 'These tests require passwordless `sudo` for `/snap/*/current/bin/setup.sh`.' >&2
      echo >&2
      echo 'Please place this line in sudoers(5):' >&2
      echo '  %sudo   ALL = NOPASSWD: /snap/*/current/bin/setup.sh' >&2
      exit 3
    fi
  else
    echo 'WARNING: Could not check whether `sudo /snap/â€¦/setup.sh` works.' >&2
  fi

unit: template
template-resource: client-snaps
category_id: client
id: snaps/{snap}-{channel}
plugin: user-interact-verify
estimated_duration: 60.0
depends: snaps/check_environment
_purpose:
  This test verifies that {snap}/{channel} runs fine
  .
  It will start {snap} in Ubuntu Frame - check that it does
  and that you can interact with it OK, then quit {snap}.
imports:
  from com.canonical.certification import executable
  from io.mir-server import store as store2
requires:
  executable.name == "frame-it"
  executable.name == "ubuntu-frame"
  (store.snap == "{snap}") and store.risk == "stable" and store2.snap == "{snap}" and store2.risk == "{channel}" and store.revision != store2.revision
command:
  set -xeuo pipefail
  SNAP={snap}_$$
  .
  trap "snap remove --purge $SNAP" EXIT
  snap install $SNAP --channel {channel}
  check_snap_current.sh $SNAP latest {channel}
  if [ -x /snap/$SNAP/current/bin/setup.sh ]; then
    timeout 10 sudo /snap/$SNAP/current/bin/setup.sh
  fi
  .
  clean_env.sh frame-it $SNAP
_verification:
  1. Did {snap} start up in Frame?
  2. Could you interact with it?
  .
  Promote from `{channel}` to `stable` at https://snapcraft.io/{snap}/releases

unit: template
template-resource: server-snaps
category_id: server
id: snaps/{snap}-{track}-{risk}
plugin: user-interact-verify
estimated_duration: 60.0
depends: snaps/check_environment
imports:
  from io.mir-server import store as store2
requires:
  (store.snap == "{snap}") and store.track == "{track}" and store.risk == "stable" and store2.snap == "{snap}" and store2.track == "{track}" and store2.risk == "{risk}" and store.revision != store2.revision
_purpose:
  This test verfies that {snap}/{track}/{risk} runs fine.
  .
  It will start {snap} - check that it does and that you can interact
  with it OK, then quit {snap}.
command:
  set -xeuo pipefail
  SNAP={snap}_$$
  .
  trap "snap remove --purge $SNAP" EXIT
  snap install $SNAP --channel {track}/{risk} {snap-options}
  check_snap_current.sh $SNAP {track} {risk}
  .
  if [ -x /snap/$SNAP/current/bin/setup.sh ]; then
    timeout 10 sudo /snap/$SNAP/current/bin/setup.sh
  fi
  snap connect $SNAP:x11
  .
  WAYLAND_DISPLAY=wayland-00$$ clean_env.sh $SNAP
_verification:
  1. Did {snap} start fine?
  2. Could you interact with it OK?
  .
  Promote from `{track}/{risk}` to `{track}/stable` at https://snapcraft.io/{snap}/releases

unit: template
template-resource: session-snaps
category_id: session
id: snaps/{snap}-{track}-{risk}
plugin: user-interact-verify
estimated_duration: 60.0
depends: snaps/check_environment
imports:
  from io.mir-server import store as store2
requires:
  (store.snap == "{snap}") and store.risk == "{target_risk}" and store2.snap == "{snap}" and store2.risk == "{risk}" and store.revision != store2.revision
_purpose:
  This test verfies that the {snap}/{track}/{risk} session works
command:
  set -xeuo pipefail
  SNAP={snap}_$$
  .
  trap "snap remove --purge $SNAP" EXIT
  snap install $SNAP --channel {track}/{risk}
  check_snap_current.sh $SNAP {track} {risk}
  .
  if [ -x /snap/$SNAP/current/bin/setup.sh ]; then
    timeout 10 sudo /snap/$SNAP/current/bin/setup.sh
  fi
_verification:
  1. Check that you can log in to the {snap} session
  2. Check that you can use the session OK
  3. Quit the session
  4. Was everything OK?
  .
  Promote from `{track}/{risk}` to `{track}/{target_risk}` at https://snapcraft.io/{snap}/releases

unit: template
template-resource: ancillary-snaps
category_id: client
id: snaps/{snap}-{track}-{risk}
plugin: user-interact-verify
estimated_duration: 60.0
depends: snaps/check_environment
_purpose:
  This test verfies that {snap} {track}/{risk} works
  .
  {purpose}
  .
  Quit the editor to continue.
imports:
  from com.canonical.certification import executable
  from io.mir-server import store as store2
requires:
  executable.name == "frame-it"
  executable.name == "ubuntu-frame"
  (store.snap == "{snap}") and store.track == "{track}" and store.risk == "stable" and store2.snap == "{snap}" and store2.track == "{track}" and store2.risk == "{risk}" and store.revision != store2.revision
command:
  set -xeuo pipefail
  .
  OUTPUT=$( mktemp )
  export XDG_RUNTIME_DIR=/run/user/$( id -u )
  export WAYLAND_DISPLAY=wayland-00$$
  SNAP={snap}_$$
  .
  trap "snap remove --purge $SNAP" EXIT
  snap install $SNAP --channel {track}/{risk}
  check_snap_current.sh $SNAP {track} {risk}
  .
  if [ -x /snap/$SNAP/current/bin/setup.sh ]; then
    timeout 10 sudo /snap/$SNAP/current/bin/setup.sh
  fi
  .
  cleanup() {{
    # Run through cleanup despite errors
    set +euo pipefail
    STATUS=$( cat $OUTPUT.status )
    rm $OUTPUT*
    for pid in $( jobs -p ); do
        kill $pid
        timeout 10 tail --pid=$pid -f /dev/null || kill -9 $pid
        timeout 10 tail --pid=$pid -f /dev/null || echo "WARNING: Failed to clean up PID $pid"
    done
    exit $STATUS
  }}
  .
  wait_and_run() {{
    timeout 10 sh -c "until [ -S $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY ]; do sleep 1; done"
    exec "$@"
  }}
  .
  trap cleanup EXIT
  .
  wait_and_run ${SNAP} &
  .
  clean_env.sh frame-it gnome-text-editor \
  && echo 0 > $OUTPUT.status \
  || echo $? > $OUTPUT.status
_verification:
  {verification}
  .
  Promote from `{track}/{risk}` to `stable` at https://snapcraft.io/{snap}/releases

unit: template
template-resource: jenkins-snaps
category_id: utility
id: snaps/{snap}-{track}-{risk}
plugin: user-interact-verify
estimated_duration: 60.0
imports:
  from io.mir-server import store as store2
requires:
  (store.snap == "{snap}") and store.track == "{track}" and store.risk == "stable" and store2.snap == "{snap}" and store2.track == "{track}" and store2.risk == "{risk}" and store.revision != store2.revision
_purpose:
  This verfies that {snap} {track}/{risk} tested fine
command:
  curl -s -H "Snap-Device-Series: 16" \
    "https://api.snapcraft.io/v2/snaps/info/{snap}" \
  | jq -r --arg TRACK "{track}" --arg RISK "{risk}" '."channel-map" | .[] | select(.channel.risk==$RISK) | [select(.channel.track==$TRACK).channel.architecture, select(.channel.track==$TRACK).revision] | @tsv' \
  | grep -v '^$'
_verification:
  1. Check the results at http://10.102.156.15:8080/search/?q={snap}-{track}-{risk}
  2. Check that the revisions above were tested and succeeded
  .
  Promote from `{track}/{risk}` to `stable` at https://snapcraft.io/{snap}/releases
